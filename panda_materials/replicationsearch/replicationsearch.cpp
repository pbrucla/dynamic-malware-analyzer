/*
Makes with
    asid_instr_count
    asidstory
    callstack_instr
    syscalls2
    replicationsearch
in config.panda
*/

#include "panda/plugin.h"
#include "syscalls2/syscalls_ext_typedefs.h"

void my_NtCreateFile_enter(
	CPUState* env,
	target_ulong pc,
	uint64_t FileHandle,
	uint32_t DesiredAccess,
	uint64_t ObjectAttributes,
	uint64_t IoStatusBlock,
	uint64_t AllocationSize,
	uint32_t FileAttributes,
	uint32_t ShareAccess,
	uint32_t CreateDisposition,
	uint32_t CreateOptions,
	uint64_t EaBuffer,
	uint32_t EaLength){
	
	printf("NtCreateFile(FileHandle=%x, DesiredAccess=%x, ObjectAttributes=%x, "
                     "IoStatusBlock=%x, AllocationSize=%x, FileAttributes=%x, "
                     "ShareAccess=%x, CreateDisposition=%x, CreateOptions=%x, "
					 "EaBuffer=%x, EaLength=%x)\n",
        FileHandle, DesiredAccess, ObjectAttributes, IoStatusBlock, 
		AllocationSize, FileAttributes, ShareAccess, CreateDisposition,
		CreateOptions, EaBuffer, EaLength);
	return;
}

bool init_plugin(void *self) {
	// PPP_REG_CB("syscalls2", on_unknown_sys_enter, test_one) ;
    PPP_REG_CB("syscalls2", on_NtCreateFile_enter, my_NtCreateFile_enter);
    return true;
}

void uninit_plugin(void *self) {
}

extern "C" {
    bool init_plugin(void*);
    void uninit_plugin(void*);

    // API Functions
}

void test_one (CPUState *env, target_ulong pc, target_ulong callno)
{
        printf("Hello, World!");
}

